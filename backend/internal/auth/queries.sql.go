// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package auth

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO users (name, password) VALUES ($1, $2) RETURNING id, name, password
`

type CreateParams struct {
	Name     string
	Password string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const delete = `-- name: Delete :one
DELETE FROM users WHERE id = $1 RETURNING id, name, password
`

func (q *Queries) Delete(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, delete, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const findByName = `-- name: FindByName :one
SELECT id, name, password FROM users WHERE name = $1
`

func (q *Queries) FindByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, findByName, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}

const update = `-- name: Update :one
UPDATE users SET name = $2, password = $3 WHERE id = $1 RETURNING id, name, password
`

type UpdateParams struct {
	ID       pgtype.UUID
	Name     string
	Password string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Password)
	return i, err
}
