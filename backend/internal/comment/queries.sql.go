// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package comment

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO comments (post_id, author_id, title, content) VALUES ($1, $2, $3, $4) RETURNING id, post_id, author_id, title, content, created_at
`

type CreateParams struct {
	PostID   pgtype.UUID `json:"post_id"`
	AuthorID pgtype.UUID `json:"author_id"`
	Title    pgtype.Text `json:"title"`
	Content  pgtype.Text `json:"content"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Comment, error) {
	row := q.db.QueryRow(ctx, create,
		arg.PostID,
		arg.AuthorID,
		arg.Title,
		arg.Content,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM comments WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const findAll = `-- name: FindAll :many
SELECT id, post_id, author_id, title, content, created_at FROM comments
`

func (q *Queries) FindAll(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.Query(ctx, findAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.AuthorID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByID = `-- name: FindByID :one
SELECT id, post_id, author_id, title, content, created_at FROM comments WHERE id = $1
`

func (q *Queries) FindByID(ctx context.Context, id pgtype.UUID) (Comment, error) {
	row := q.db.QueryRow(ctx, findByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE comments SET title = $2, content = $3 WHERE id = $1 RETURNING id, post_id, author_id, title, content, created_at
`

type UpdateParams struct {
	ID      pgtype.UUID `json:"id"`
	Title   pgtype.Text `json:"title"`
	Content pgtype.Text `json:"content"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Comment, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Title, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.AuthorID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
